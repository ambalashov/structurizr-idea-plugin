/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.github.ambalashov.sturcturizr;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import io.github.ambalashov.sturcturizr.psi.StructurizrTypes;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Structurizr.flex</tt>
 */
public class StructurizrLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\45\1\44\1\4\7\0\1\53\2\0\1\7\1\25\1\5\12\10\3"+
    "\0\1\51\1\52\2\0\1\24\1\21\1\11\10\24\1\43\6\24\1\37\7\24\4\0\1\10\1\0\1\32"+
    "\1\6\1\33\1\16\1\17\1\36\1\40\1\46\1\14\1\6\1\27\1\13\1\34\1\15\1\22\1\31"+
    "\1\6\1\20\1\30\1\35\1\41\1\42\1\26\1\23\1\12\1\6\1\47\1\0\1\50\7\0\1\1\242"+
    "\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\1\3\4\7\3"+
    "\1\1\1\5\1\6\1\7\1\10\1\0\1\11\1\12"+
    "\1\0\1\13\2\4\11\3\1\0\2\4\1\14\12\3"+
    "\2\0\1\4\12\3\2\0\1\4\7\3\1\15\1\16"+
    "\1\17\2\0\1\4\3\3\1\20\3\3\2\0\1\4"+
    "\7\3\2\0\7\3\1\21\1\0\1\22\4\3\1\23"+
    "\1\24\1\0\3\3\1\25\1\0\3\3\1\0\3\3"+
    "\1\0\1\26\2\3\1\0\1\3\1\27\1\0\1\30"+
    "\12\0\1\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\54\0\130\0\204\0\260\0\334\0\u0108"+
    "\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268"+
    "\0\u0294\0\u02c0\0\u02ec\0\54\0\54\0\54\0\54\0\204"+
    "\0\54\0\u0318\0\u0344\0\54\0\u0370\0\u039c\0\u03c8\0\u03f4"+
    "\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554"+
    "\0\u0580\0\u05ac\0\u018c\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688"+
    "\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8"+
    "\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948"+
    "\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8"+
    "\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\334\0\334\0\334\0\u0b84"+
    "\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\334\0\u0c8c\0\u0cb8"+
    "\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18"+
    "\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78"+
    "\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\54\0\u1054\0\334\0\u1080"+
    "\0\u10ac\0\u10d8\0\u1104\0\334\0\334\0\u1130\0\u115c\0\u1188"+
    "\0\u11b4\0\334\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc"+
    "\0\u12e8\0\u1314\0\u1340\0\334\0\u136c\0\u1398\0\u13c4\0\u13f0"+
    "\0\334\0\u141c\0\334\0\u1448\0\u1474\0\u14a0\0\u14cc\0\u14f8"+
    "\0\u1524\0\u1550\0\u157c\0\u15a8\0\u15d4\0\54";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\7\7\1\12\2\7\1\13\1\2\1\14\1\7"+
    "\1\15\1\16\1\7\1\17\1\20\2\7\1\13\1\21"+
    "\1\7\1\22\1\13\1\23\1\3\1\7\1\24\1\25"+
    "\1\26\1\2\1\27\56\0\1\3\51\0\4\30\1\31"+
    "\47\30\5\0\1\32\53\0\1\13\1\7\1\0\15\7"+
    "\1\33\16\7\2\0\1\7\57\0\1\34\6\0\2\13"+
    "\1\0\2\13\1\35\12\13\1\33\16\13\2\0\1\13"+
    "\12\0\2\13\1\0\12\13\1\36\2\13\1\33\16\13"+
    "\2\0\1\13\12\0\2\13\1\0\15\13\1\33\16\13"+
    "\2\0\1\13\12\0\1\13\1\7\1\0\12\7\1\37"+
    "\2\7\1\33\16\7\2\0\1\7\12\0\1\13\1\7"+
    "\1\0\2\7\1\40\7\7\1\41\2\7\1\33\16\7"+
    "\2\0\1\7\12\0\1\13\1\7\1\0\7\7\1\42"+
    "\1\43\4\7\1\33\16\7\2\0\1\7\12\0\1\13"+
    "\1\7\1\0\12\7\1\44\2\7\1\33\16\7\2\0"+
    "\1\7\12\0\1\13\1\7\1\0\12\7\1\45\2\7"+
    "\1\33\16\7\2\0\1\7\12\0\1\13\1\7\1\0"+
    "\10\7\1\46\4\7\1\33\16\7\2\0\1\7\12\0"+
    "\1\13\1\7\1\0\4\7\1\47\10\7\1\33\16\7"+
    "\2\0\1\7\21\0\1\50\37\0\2\32\2\0\50\32"+
    "\6\0\1\51\1\0\15\51\1\0\16\51\2\0\1\51"+
    "\12\0\2\13\1\0\3\13\1\52\11\13\1\33\16\13"+
    "\2\0\1\13\12\0\2\13\1\0\13\13\1\53\1\13"+
    "\1\33\16\13\2\0\1\13\12\0\1\13\1\7\1\0"+
    "\10\7\1\54\4\7\1\33\16\7\2\0\1\7\12\0"+
    "\1\13\1\7\1\0\15\7\1\33\2\7\1\55\13\7"+
    "\2\0\1\7\12\0\1\13\1\7\1\0\15\7\1\33"+
    "\10\7\1\56\5\7\2\0\1\7\12\0\1\13\1\7"+
    "\1\0\10\7\1\57\4\7\1\33\16\7\2\0\1\7"+
    "\12\0\1\13\1\7\1\0\12\7\1\60\2\7\1\33"+
    "\16\7\2\0\1\7\12\0\1\13\1\7\1\0\5\7"+
    "\1\61\7\7\1\33\6\7\1\62\7\7\2\0\1\7"+
    "\12\0\1\13\1\7\1\0\6\7\1\63\6\7\1\33"+
    "\16\7\2\0\1\7\12\0\1\13\1\7\1\0\12\7"+
    "\1\64\2\7\1\33\16\7\2\0\1\7\12\0\1\13"+
    "\1\7\1\0\7\7\1\65\5\7\1\33\16\7\2\0"+
    "\1\7\22\0\1\66\1\67\43\0\1\51\1\0\15\51"+
    "\1\33\16\51\2\0\1\51\12\0\2\13\1\0\4\13"+
    "\1\70\10\13\1\33\16\13\2\0\1\13\12\0\1\13"+
    "\1\7\1\0\15\7\1\33\1\7\1\71\14\7\2\0"+
    "\1\7\12\0\1\13\1\7\1\0\15\7\1\33\7\7"+
    "\1\72\6\7\2\0\1\7\12\0\1\13\1\7\1\0"+
    "\15\7\1\33\7\7\1\73\6\7\2\0\1\7\12\0"+
    "\1\13\1\7\1\0\15\7\1\33\2\7\1\74\13\7"+
    "\2\0\1\7\12\0\1\13\1\7\1\0\15\7\1\33"+
    "\3\7\1\75\12\7\2\0\1\7\12\0\1\13\1\7"+
    "\1\0\15\7\1\33\7\7\1\76\6\7\2\0\1\7"+
    "\12\0\1\13\1\7\1\0\15\7\1\33\3\7\1\77"+
    "\12\7\2\0\1\7\12\0\1\13\1\7\1\0\7\7"+
    "\1\100\5\7\1\33\16\7\2\0\1\7\12\0\1\13"+
    "\1\7\1\0\15\7\1\33\13\7\1\101\2\7\2\0"+
    "\1\7\12\0\1\13\1\7\1\0\15\7\1\33\1\102"+
    "\15\7\2\0\1\7\40\0\1\103\37\0\1\104\41\0"+
    "\2\13\1\0\5\13\1\105\7\13\1\33\16\13\2\0"+
    "\1\13\12\0\1\13\1\7\1\0\15\7\1\33\2\7"+
    "\1\106\13\7\2\0\1\7\12\0\1\13\1\7\1\0"+
    "\7\7\1\107\5\7\1\33\16\7\2\0\1\7\12\0"+
    "\1\13\1\7\1\0\15\7\1\33\1\110\15\7\2\0"+
    "\1\7\12\0\1\13\1\7\1\0\12\7\1\111\2\7"+
    "\1\33\16\7\2\0\1\7\12\0\1\13\1\7\1\0"+
    "\7\7\1\112\5\7\1\33\16\7\2\0\1\7\12\0"+
    "\1\13\1\7\1\0\15\7\1\33\4\7\1\113\11\7"+
    "\2\0\1\7\12\0\1\13\1\7\1\0\12\7\1\114"+
    "\2\7\1\33\16\7\2\0\1\7\12\0\1\13\1\7"+
    "\1\0\3\7\1\115\11\7\1\33\16\7\2\0\1\7"+
    "\12\0\1\13\1\7\1\0\15\7\1\33\3\7\1\116"+
    "\12\7\2\0\1\7\12\0\1\13\1\7\1\0\15\7"+
    "\1\33\2\7\1\117\13\7\2\0\1\7\20\0\1\120"+
    "\55\0\1\121\43\0\2\13\1\0\6\13\1\122\6\13"+
    "\1\33\16\13\2\0\1\13\12\0\1\13\1\7\1\0"+
    "\15\7\1\33\3\7\1\123\12\7\2\0\1\7\12\0"+
    "\1\13\1\7\1\0\15\7\1\33\6\7\1\124\7\7"+
    "\2\0\1\7\12\0\1\13\1\7\1\0\15\7\1\33"+
    "\4\7\1\125\11\7\2\0\1\7\12\0\1\13\1\7"+
    "\1\0\5\7\1\126\7\7\1\33\16\7\2\0\1\7"+
    "\12\0\1\13\1\7\1\0\10\7\1\127\4\7\1\33"+
    "\16\7\2\0\1\7\12\0\1\13\1\7\1\0\4\7"+
    "\1\130\10\7\1\33\16\7\2\0\1\7\12\0\1\13"+
    "\1\7\1\0\5\7\1\131\7\7\1\33\16\7\2\0"+
    "\1\7\46\0\1\132\47\0\1\133\23\0\2\13\1\0"+
    "\7\13\1\134\5\13\1\33\16\13\2\0\1\13\12\0"+
    "\1\13\1\7\1\0\15\7\1\33\4\7\1\135\11\7"+
    "\2\0\1\7\12\0\1\13\1\7\1\0\1\7\1\136"+
    "\13\7\1\33\15\7\1\137\2\0\1\7\12\0\1\13"+
    "\1\7\1\0\10\7\1\140\4\7\1\33\16\7\2\0"+
    "\1\7\12\0\1\13\1\7\1\0\15\7\1\33\7\7"+
    "\1\141\6\7\2\0\1\7\12\0\1\13\1\7\1\0"+
    "\5\7\1\142\7\7\1\33\16\7\2\0\1\7\12\0"+
    "\1\13\1\7\1\0\7\7\1\143\5\7\1\33\16\7"+
    "\2\0\1\7\23\0\1\144\51\0\1\145\44\0\2\13"+
    "\1\0\10\13\1\53\4\13\1\33\16\13\2\0\1\13"+
    "\12\0\1\13\1\7\1\0\15\7\1\33\5\7\1\146"+
    "\10\7\2\0\1\7\12\0\1\13\1\7\1\0\12\7"+
    "\1\147\2\7\1\33\16\7\2\0\1\7\12\0\1\13"+
    "\1\7\1\0\15\7\1\33\4\7\1\150\11\7\2\0"+
    "\1\7\12\0\1\13\1\7\1\0\7\7\1\151\5\7"+
    "\1\33\16\7\2\0\1\7\12\0\1\13\1\7\1\0"+
    "\4\7\1\152\10\7\1\33\16\7\2\0\1\7\12\0"+
    "\1\13\1\7\1\0\7\7\1\153\5\7\1\33\16\7"+
    "\2\0\1\7\12\0\1\13\1\7\1\0\5\7\1\154"+
    "\7\7\1\33\16\7\2\0\1\7\24\0\1\155\72\0"+
    "\1\156\22\0\1\13\1\7\1\0\7\7\1\157\5\7"+
    "\1\33\16\7\2\0\1\7\12\0\1\13\1\7\1\0"+
    "\5\7\1\160\7\7\1\33\16\7\2\0\1\7\12\0"+
    "\1\13\1\7\1\0\5\7\1\161\7\7\1\33\16\7"+
    "\2\0\1\7\12\0\1\13\1\7\1\0\15\7\1\33"+
    "\11\7\1\162\4\7\2\0\1\7\12\0\1\13\1\7"+
    "\1\0\7\7\1\163\5\7\1\33\16\7\2\0\1\7"+
    "\12\0\1\13\1\7\1\0\10\7\1\164\4\7\1\33"+
    "\16\7\2\0\1\7\12\0\1\13\1\7\1\0\15\7"+
    "\1\33\7\7\1\165\6\7\2\0\1\7\21\0\1\166"+
    "\44\0\1\13\1\7\1\0\15\7\1\33\7\7\1\167"+
    "\6\7\2\0\1\7\12\0\1\13\1\7\1\0\6\7"+
    "\1\170\6\7\1\33\16\7\2\0\1\7\12\0\1\13"+
    "\1\7\1\0\2\7\1\171\12\7\1\33\16\7\2\0"+
    "\1\7\12\0\1\13\1\7\1\0\15\7\1\33\2\7"+
    "\1\172\13\7\2\0\1\7\24\0\1\173\41\0\1\13"+
    "\1\7\1\0\7\7\1\174\5\7\1\33\16\7\2\0"+
    "\1\7\12\0\1\13\1\7\1\0\15\7\1\33\2\7"+
    "\1\175\13\7\2\0\1\7\12\0\1\13\1\7\1\0"+
    "\15\7\1\33\2\7\1\176\13\7\2\0\1\7\25\0"+
    "\1\177\40\0\1\13\1\7\1\0\13\7\1\200\1\7"+
    "\1\33\16\7\2\0\1\7\12\0\1\13\1\7\1\0"+
    "\15\7\1\33\5\7\1\201\10\7\2\0\1\7\12\0"+
    "\1\13\1\7\1\0\15\7\1\33\7\7\1\202\6\7"+
    "\2\0\1\7\35\0\1\203\30\0\1\13\1\7\1\0"+
    "\15\7\1\33\7\7\1\204\6\7\2\0\1\7\12\0"+
    "\1\13\1\7\1\0\15\7\1\33\4\7\1\205\11\7"+
    "\2\0\1\7\12\0\1\13\1\7\1\0\7\7\1\206"+
    "\5\7\1\33\16\7\2\0\1\7\52\0\1\207\13\0"+
    "\1\13\1\7\1\0\15\7\1\33\3\7\1\210\12\7"+
    "\2\0\1\7\12\0\1\13\1\7\1\0\15\7\1\33"+
    "\6\7\1\211\7\7\2\0\1\7\53\0\1\212\12\0"+
    "\1\13\1\7\1\0\7\7\1\213\5\7\1\33\16\7"+
    "\2\0\1\7\21\0\1\214\56\0\1\215\54\0\1\216"+
    "\65\0\1\217\41\0\1\220\66\0\1\221\66\0\1\222"+
    "\21\0\1\223\72\0\1\224\52\0\1\225\34\0\1\226"+
    "\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5632];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\20\1\4\11\1\0\1\11\1\1\1\0"+
    "\1\11\13\1\1\0\15\1\2\0\13\1\2\0\13\1"+
    "\2\0\10\1\2\0\10\1\2\0\7\1\1\11\1\0"+
    "\7\1\1\0\4\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\2\1\1\0\1\1\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public StructurizrLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public StructurizrLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 26: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 27: break;
          case 3: 
            { return StructurizrTypes.ID_TOKEN;
            } 
            // fall through
          case 28: break;
          case 4: 
            { return StructurizrTypes.FILE;
            } 
            // fall through
          case 29: break;
          case 5: 
            { return StructurizrTypes.LB;
            } 
            // fall through
          case 30: break;
          case 6: 
            { return StructurizrTypes.RB;
            } 
            // fall through
          case 31: break;
          case 7: 
            { return StructurizrTypes.EQ;
            } 
            // fall through
          case 32: break;
          case 8: 
            { return StructurizrTypes.ASTERISK;
            } 
            // fall through
          case 33: break;
          case 9: 
            { return StructurizrTypes.QUOTED_TEXT;
            } 
            // fall through
          case 34: break;
          case 10: 
            { yybegin(YYINITIAL); return StructurizrTypes.COMMENT;
            } 
            // fall through
          case 35: break;
          case 11: 
            { return StructurizrTypes.REL;
            } 
            // fall through
          case 36: break;
          case 12: 
            { return StructurizrTypes.SHAPE_TYPE;
            } 
            // fall through
          case 37: break;
          case 13: 
            { return StructurizrTypes.MODEL;
            } 
            // fall through
          case 38: break;
          case 14: 
            { return StructurizrTypes.GROUP;
            } 
            // fall through
          case 39: break;
          case 15: 
            { return StructurizrTypes.VIEWS;
            } 
            // fall through
          case 40: break;
          case 16: 
            { return StructurizrTypes.PERSON;
            } 
            // fall through
          case 41: break;
          case 17: 
            { return StructurizrTypes.INCLUDE_KEYWORD;
            } 
            // fall through
          case 42: break;
          case 18: 
            { return StructurizrTypes.WORKSPACE;
            } 
            // fall through
          case 43: break;
          case 19: 
            { return StructurizrTypes.CONTAINER;
            } 
            // fall through
          case 44: break;
          case 20: 
            { return StructurizrTypes.COMPONENT;
            } 
            // fall through
          case 45: break;
          case 21: 
            { return StructurizrTypes.PROPERTIES;
            } 
            // fall through
          case 46: break;
          case 22: 
            { return StructurizrTypes.SYSTEMCONTEXT;
            } 
            // fall through
          case 47: break;
          case 23: 
            { return StructurizrTypes.SOFTWARESYSTEM;
            } 
            // fall through
          case 48: break;
          case 24: 
            { return StructurizrTypes.SYSTEMLANDSCAPE;
            } 
            // fall through
          case 49: break;
          case 25: 
            { return StructurizrTypes.IDENTIFIERS_HIERARCHICAL;
            } 
            // fall through
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
